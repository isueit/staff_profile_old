<?php
use \Drupal\Core\Field\FieldDefinitionInterface;
use \Drupal\Core\Session\AccountInterface;
use \Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Access\AccessResult;

/**
 * @file
 * Staff Profile module
 */

 /**
  * Implements hook_entity_field_access()
  */
 function staff_profile_entity_field_access($operation, $field_defintition, $account, $items = NULL) {
   $admin_options = array('weight', 'status', 'user_id', 'field_from_staff_directory', 'field_department_id');
   if ($field_defintition->getTargetEntityTypeId() == 'staff_profile_profile' && in_array($field_defintition->getName(), $admin_options) && $operation == 'edit') {
     if ($account->hasPermission('administer staff profile entity')) {
       return AccessResult::allowedIfHasPermission($account, 'administer staff profile entity');
     } else {
       return AccessResult::forbidden();
     }
   }
   return AccessResult::neutral();
 }

 /**
  * Implements hook_Entity_Type_view_alter()
  * Uses label (name) as title, page meta title remains the same
  * Removes local image from display if entity has smugmug image
  */
function staff_profile_staff_profile_profile_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  $build['#title'] = $entity->label();
  if (isset($build['field_profile_smugmug_image']['#entity_type'])) {
    unset($build['field_profile_image']);
  }
}

/**
 * Add wildcards to text in search
 */
function staff_profile_search_preprocess($text, $langcoge = NULL) {
  $text = explode(" ", $text);
  foreach ($text as $name => $key) {
    if (preg_match("/\%/", $key) == FALSE) {
      $keys[$name] = "%" . $key . "%";
    }
  }
  $text = implode(" ", $keys);
  return $text;
}

/**
 * Implements hook_ENTITY_insert()
 * Trigger on creation of new user to give them ownership
 */
function staff_profile_user_insert(Drupal\Core\Entity\EntityInterface $user) {
  $email = $user->getEmail();
  $local_profile = \Drupal::entityTypeManager()->getStorage('staff_profile_profile')->loadByProperties(['field_email' => $email]);
  if (!empty($local_profile)) {
    //Array key set to entity id
    reset($local_profile)->setOwnerId($user->id())
      ->setOwner($user)
      ->setOwnerId($user->id())
    ->save();
    drupal_set_message(t('Staff Profile ownership assigned to user with email: %email.', ['%email' => $email]));
  } else {
    $newEntity = \Drupal\staff_profile\Entity\StaffProfile::create([
      'field_email' => $email,
      'user_id' => $user->id(),
    ]);
    $newEntity->setUnpublished()
    ->setOwnerId($user->id())
    ->setOwner($user)
    ->save();
    drupal_set_message(t('New Staff Profile created for user with email: %email.', ['%email' => $email]));
  }
}

/**
 * Implements hook_user_predelete()
 * Delete Staff Profile when user account is deleted
 */
function staff_profile_user_predelete($user) {
  $userid = $user->id();
  $local_profile = \Drupal::entityTypeManager()->getStorage('staff_profile_profile')->loadByProperties(['user_id' => $userid]);
  if (!empty($local_profile)) {
    reset($local_profile)->delete();
  }
}

/**
 * Implements hook_user_cancel()
 * Unpublished or reassigns ownership of staff_profile on user removal
 */
function staff_profile_user_cancel($edit, $account, $method) {
  $userid = $account->id();
  $local_profile = \Drupal::entityTypeManager()->getStorage('staff_profile_profile')->loadByProperties(['user_id' => $userid]);
  switch ($method) {
    case 'user_cancel_block_unpublish':
    if (!empty($local_profile)) {
      reset($local_profile)->setUnpublished()
      ->save();
    }
      break;
    case 'user_cancel_reassign':
      if (!empty($local_profile)) {
        reset($local_profile)->setOwnerId(0)
        ->setOwner(\Drupal\user\Entity\User::load(0))
        ->save();
      }
      break;

  }
}

/**
 * Implements hook_theme()
 * Add theme to display custom template
 */
function staff_profile_theme($existing, $type, $theme, $path) {
  return array(
    'search_result__staff_profile_profile_search' => array(
      'variables' => array()
    )
  );
}

/**
 * Implements template_preprocess_hook
 * Creates template that is used with the staff_profile theme for search results
 */
function template_preprocess_search_result__staff_profile_profile_search(&$variables) {
  $language_interface = \Drupal::languageManager()
    ->getCurrentLanguage();
  $result = $variables['result'];
  $variables['url'] = \Drupal\Component\Utility\UrlHelper::stripDangerousProtocols($result['link']);
  $variables['title'] = $result['title'];
  if (isset($result['language']) && $result['language'] != $language_interface
    ->getId() && $result['language'] != LanguageInterface::LANGCODE_NOT_SPECIFIED) {
    $variables['title_attributes']['lang'] = $result['language'];
    $variables['content_attributes']['lang'] = $result['language'];
  }
  $info = array();
  if (!empty($result['plugin_id'])) {
    $info['plugin_id'] = $result['plugin_id'];
  }
  if (!empty($result['user'])) {
    $info['user'] = $result['user'];
  }
  if (!empty($result['date'])) {
    $info['date'] = format_date($result['date'], 'short');
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }

  // Check for existence. User search does not include snippets.
  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';

  // Provide separated and grouped meta information..
  $variables['info_split'] = $info;
  $variables['info'] = array(
    '#type' => 'inline_template',
    '#template' => '{{ info|safe_join(" - ") }}',
    '#context' => array(
      'info' => $info,
    ),
  );
}
